---
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2025 NumFOCUS

import BasePage from '@awesome-myst/myst-awesome/layouts/BasePage.astro';
import SearchDialog from '@awesome-myst/myst-awesome/components/SearchDialog.astro';
import Footer from '@awesome-myst/myst-awesome/components/Footer.astro';
import NavigationMenu from '@awesome-myst/myst-awesome/components/NavigationMenu.astro';

import Authors from '../../../components/Authors.astro';
import Header from '../../../components/Header.astro';

import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';

import { generatePageUrl } from '@awesome-myst/myst-awesome/lib/generate-page-url.ts';

export async function getStaticPaths() {
  try {
    console.log('Starting getStaticPaths for [id].astro');

    const pages = await getCollection('pages');
    const projectConfig = (await getCollection('projectFrontmatter'))[0];

    console.log(`Total pages found: ${pages.length}`);

    const paths = pages.map((page, index) => {
      const id = page.id;

      console.log(`Processing page ${index + 1}: "${page.id}"`);

      return {
        params: { id },
        props: { page: page.data },
      };
    });

    console.log(`Generated ${paths.length} paths for [id].astro`);
    paths.forEach((path, i) => {
      console.log(`  Path ${i + 1}: id="${path.params.id}"`);
    });

    return paths;
  } catch (error) {
    console.error('Error in [id].astro getStaticPaths:', error);
    return [];
  }
}

interface PageProps {
  page: CollectionEntry<'pages'>;
}

const { page } = Astro.props as PageProps;

const allPages = await getCollection('pages');

console.log('page', page)

const title = page?.frontmatter?.title || 'Publication';
const abstract = page?.frontmatter?.abstract || '';
const frontmatter = page?.frontmatter;

const foldersOption = false;
const baseDir = "/";
const showToc = typeof page.mdast.children !== "undefined";

import "../../../styles/custom.css";

// Create navigation items from all pages
const navItems = allPages
  .filter(p => p.id)
  .map(p => ({
    title: p.id === '/' ? 'Home' :
           (p.id.slice(1).charAt(0).toUpperCase() + p.id.slice(2)) || 'Page',
    href: generatePageUrl(p.id, foldersOption, baseDir),
    current: p.id === page.id,
    icon: p.id === '/' ? 'home' : 'file-text'
  }));

const tocItems = showToc ? generatePageToc(page.data) : [];

// Get prev/next pages for navigation
const currentIndex = allPages.findIndex(p => p.id === page.id);
const prevPage = currentIndex > 0 ? allPages[currentIndex - 1] : null;
const nextPage = currentIndex < allPages.length - 1 ? allPages[currentIndex + 1] : null;

// Mock data for demonstration - in real app this would come from the publication data
const mockFiles = [
  { name: 'README.md', type: 'file', size: '2.3 KB' },
  { name: 'source_code.zip', type: 'file', size: '15.7 MB' },
  { name: 'data/', type: 'folder', size: '' },
  { name: 'data/images/', type: 'folder', size: '' },
  { name: 'data/images/ct_scan_001.nii.gz', type: 'file', size: '45.2 MB' },
  { name: 'data/images/ct_scan_002.nii.gz', type: 'file', size: '38.9 MB' },
  { name: 'scripts/', type: 'folder', size: '' },
  { name: 'scripts/preprocessing.py', type: 'file', size: '1.8 KB' },
  { name: 'scripts/segmentation.py', type: 'file', size: '3.2 KB' }
];
---

<BasePage
  title={title}
  description={abstract}
  theme="default"
  colorScheme="auto"
  mobileBreakpoint="920px"
>
  <Header slot="header" />

  <!-- Navigation with search -->
  <div slot="navigation-header" class="nav-header">
    <div class="nav-logo">
      <img
        src="/assets/logo-insight-journal-square-dark.png"
        alt="Insight Journal logo"
        class="project-logo theme-aware-logo"
      />
    </div>
    <!-- Desktop search (hidden on mobile) -->
    <div class="desktop-search-container ij-nav-search">
      <SearchDialog foldersOption={false} />
    </div>
  </div>

  <!-- Main content -->
  <div class="publication-content">
    <!-- Frontmatter Block with fancy background -->
    <div class="frontmatter-container">
      <div class="frontmatter-background">
        <div class="frontmatter-overlay">
          <header>
            <h1 class="publication-title">{title}</h1>
          </header>
          <Authors authors={frontmatter?.authors} affiliations={frontmatter?.affiliations} />
        </div>
      </div>
    </div>

    <!-- Tab Group for content sections -->
    <wa-tab-group class="content-tabs">
      <!-- Abstract Tab -->
      <wa-tab slot="nav" panel="abstract">Abstract</wa-tab>
      <wa-tab-panel name="abstract">
        <div class="tab-content">
          <h2>Abstract</h2>
          <p>{abstract}</p>
          {frontmatter?.keywords && (
            <div class="keywords">
              <h3>Keywords</h3>
              <div class="keyword-tags">
                {frontmatter.keywords.map((keyword: string) => (
                  <wa-badge variant="neutral">{keyword}</wa-badge>
                ))}
              </div>
            </div>
          )}
        </div>
      </wa-tab-panel>

      <!-- Article Tab -->
      <wa-tab slot="nav" panel="article">Manuscript</wa-tab>
      <wa-tab-panel name="article">
        <div class="tab-content">
          <h2>Manuscript</h2>
          <div class="pdf-viewer">
            <iframe
              src={`/pdf/${page.slug}.pdf`}
              width="100%"
              height="800px"
              style="border: none;"
              title="Article PDF"
            ></iframe>
          </div>
        </div>
      </wa-tab-panel>

      <!-- Source Code and Data Tab -->
      <wa-tab slot="nav" panel="source">Source Code and Data</wa-tab>
      <wa-tab-panel name="source">
        <div class="tab-content">
          <h2>Source Code and Data</h2>

          <!-- File Tree -->
          <div class="file-tree-section">
            <h3>Files</h3>
            <wa-tree class="file-tree">
              {mockFiles.map((file) => (
                <wa-tree-item>
                  <wa-icon
                    slot="start"
                    name={file.type === 'folder' ? 'folder' : 'file'}
                    variant={file.type === 'folder' ? 'regular' : 'solid'}
                  ></wa-icon>
                  <span>{file.name}</span>
                  {file.size && <span slot="end" class="file-size">{file.size}</span>}
                </wa-tree-item>
              ))}
            </wa-tree>
          </div>

          <!-- Source Code Viewer -->
          <div class="code-viewer-section">
            <h3>Source Code</h3>
            <div class="code-viewer">
              <pre><code class="language-python"># Example Python code from the publication
import numpy as np
import itk

def preprocess_image(image_path):
    """Preprocess CT image for segmentation"""
    # Load image
    image = itk.imread(image_path)

    # Apply preprocessing steps
    # ... implementation details

    return processed_image

def segment_organs(image):
    """Segment organs using the proposed method"""
    # Implementation of the segmentation algorithm
    # ... implementation details

    return segmentation_result

if __name__ == "__main__":
    # Main execution
    image = preprocess_image("data/ct_scan.nii.gz")
    result = segment_organs(image)
    itk.imwrite(result, "output/segmentation.nii.gz")</code></pre>
            </div>
          </div>
        </div>
      </wa-tab-panel>
    </wa-tab-group>
  </div>

  <!-- Footer -->
  <Footer slot="footer" lastModified={frontmatter?.date_submitted ? new Date(frontmatter.date_submitted) : undefined} />
</BasePage>

<script>
  // Import Web Awesome components
  import '@awesome.me/webawesome/dist/components/tab-group/tab-group.js';
  import '@awesome.me/webawesome/dist/components/tab/tab.js';
  import '@awesome.me/webawesome/dist/components/tab-panel/tab-panel.js';
  import '@awesome.me/webawesome/dist/components/tree/tree.js';
  import '@awesome.me/webawesome/dist/components/tree-item/tree-item.js';
  import '@awesome.me/webawesome/dist/components/badge/badge.js';

  // Theme-aware logo switching functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Theme-aware logo switching
    const updateLogoForTheme = () => {
      const isDark = document.documentElement.classList.contains('wa-dark');
      const logoElement = document.querySelector('.theme-aware-logo') as HTMLImageElement;

      if (logoElement) {
        // Update the src attribute based on theme
        if (isDark) {
          logoElement.src = '/assets/logo-insight-journal-square-dark.png';
        } else {
          logoElement.src = '/assets/logo-insight-journal-square-light.png';
        }
      }
    };

    // Initial logo update
    updateLogoForTheme();

    // Listen for theme changes
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          updateLogoForTheme();
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
  });
</script>

<style>
  /* Navigation search */
  .ij-nav-search {
    padding: var(--wa-space-m);
    border-bottom: 1px solid var(--wa-color-surface-border);
  }

  .nav-search {
    width: 100%;
  }

  /* Publication content */
  .publication-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: var(--wa-space-l);
  }

  /* Frontmatter container with fancy background */
  .frontmatter-container {
    margin-bottom: var(--wa-space-2xl);
  }

  .frontmatter-background {
    background: linear-gradient(135deg, #064f8d 0%, #2d3748 100%);
    border-radius: var(--wa-border-radius-m);
    padding: var(--wa-space-l);
    position: relative;
    overflow: hidden;
  }

  .frontmatter-background::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 70% 80%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);
    pointer-events: none;
  }

  .frontmatter-overlay {
    position: relative;
    z-index: 1;
    background: var(--wa-color-surface-default);
    backdrop-filter: blur(10px);
    border-radius: var(--wa-border-radius-l);
    padding: var(--wa-space-l);
    box-shadow: var(--wa-shadow-l);
  }

  .publication-title {
    font-size: var(--wa-font-size-xl);
    font-weight: var(--wa-font-weight-bold);
    color: var(--wa-color-text-loud);
    margin: 0 0 var(--wa-space-m) 0;
    line-height: var(--wa-line-height-condensed);
  }

  /* Content tabs */
  .content-tabs {
    --track-color: var(--wa-color-surface-border);
    --indicator-color: #ff6b35;
  }

  .tab-content {
    padding: var(--wa-space-l);
    background: var(--wa-color-surface-default);
    border-radius: var(--wa-border-radius-l);
    margin-top: var(--wa-space-m);
  }

  .tab-content h2 {
    color: var(--wa-color-text-normal);
    margin-bottom: var(--wa-space-m);
    font-size: var(--wa-font-size-2xl);
  }

  .tab-content h3 {
    color: var(--wa-color-text-normal);
    margin-bottom: var(--wa-space-s);
    font-size: var(--wa-font-size-xl);
  }

  /* Keywords section */
  .keywords {
    margin-top: var(--wa-space-l);
  }

  .keyword-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--wa-space-xs);
    margin-top: var(--wa-space-s);
  }

  /* PDF viewer */
  .pdf-viewer {
    border-radius: var(--wa-border-radius-m);
    overflow: hidden;
    box-shadow: var(--wa-shadow-m);
  }

  /* File tree section */
  .file-tree-section {
    margin-bottom: var(--wa-space-2xl);
  }

  .file-tree {
    border: 1px solid var(--wa-color-surface-border);
    border-radius: var(--wa-border-radius-m);
    background: var(--wa-color-surface-lowered);
  }

  .file-size {
    font-size: var(--wa-font-size-xs);
    color: var(--wa-color-text-quiet);
    font-weight: var(--wa-font-weight-normal);
  }

  /* Code viewer section */
  .code-viewer-section {
    margin-top: var(--wa-space-l);
  }

  .code-viewer {
    background: var(--wa-color-surface-lowered);
    border: 1px solid var(--wa-color-surface-border);
    border-radius: var(--wa-border-radius-m);
    padding: var(--wa-space-m);
    overflow-x: auto;
  }

  .code-viewer pre {
    margin: 0;
    background: none;
    padding: 0;
  }

  .code-viewer code {
    font-family: var(--wa-font-family-code);
    font-size: var(--wa-font-size-s);
    line-height: var(--wa-line-height-relaxed);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .publication-content {
      padding: var(--wa-space-m);
    }

    .frontmatter-background {
      padding: var(--wa-space-m);
    }

    .tab-content {
      padding: var(--wa-space-m);
    }

    .pdf-viewer iframe {
      height: 500px;
    }
  }

  /* Dark mode adjustments */
  .wa-dark .frontmatter-overlay {
    background: rgba(30, 30, 30, 0.95);
  }

  .project-logo {
    max-width: 100%;
    height: auto;
    border-radius: var(--wa-border-radius-l);
  }

  .desktop-search-container {
    display: block;
    width: 100%;
  }

  /* Show mobile search and hide desktop search on mobile */
  @media (max-width: 920px) {
    .desktop-search-container {
      display: none;
    }
  }

  .nav-logo {
    margin-bottom: var(--wa-space-m);
    text-align: center;
  }

</style>
