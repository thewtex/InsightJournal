---
// SPDX-License-Identifier: MIT
// SPDX-FileCopyrightText: 2025 Fideus Labs LLC

/**
 * Authors component for MyST frontmatter
 * Displays authors with ORCID/email links and affiliation references
 * Props:
 * - authors: Array of Contributor objects from frontmatter
 * - affiliations: Array of Affiliation objects from frontmatter
 */
import type { Contributor, Name, Affiliation } from '@awesome-myst/myst-zod';

interface Props {
  authors?: Contributor[];
  affiliations?: Affiliation[];
}

const { authors, affiliations } = Astro.props;

// Helper function to get author name as string
function getAuthorName(author: Contributor): string {
  if (!author.name) return 'Unknown Author';

  if (typeof author.name === 'object' && typeof author.name.given === 'string' && typeof author.name.family === 'string') {
    const parts: string[] = [];
    if (author.name.given) parts.push(author.name.given);
    if (author.name.family) parts.push(author.name.family);
    if (parts.length > 0) return parts.join(' ');
  }
  // If name is a string, return it directly
  if (typeof author.name === 'string') return author.name;
  // If name is an object, use the literal property
  if (typeof author.name === 'object' && author.name.literal) {
    return author.name.literal;
  }
  return 'Unknown Author';
}

// Helper function to render affiliation by ID
function getAffiliationName(affiliationId: string, affiliations: Affiliation[] | undefined) {
  if (!affiliations) return affiliationId;
  const affiliationsLookup = Object.fromEntries(
    affiliations.map(({ id, ...rest }: any) => [id, rest])
  );
  const affiliation = affiliationsLookup[affiliationId] ?? { name: affiliationId };
  return affiliation.name || affiliation.institution || affiliationId;
}

// Build unique affiliations map with indices
const uniqueAffiliations = new Map<string, number>();
if (authors && affiliations) {
  authors.forEach(author => {
    if (author.affiliations) {
      author.affiliations.forEach(affId => {
        if (!uniqueAffiliations.has(affId)) {
          uniqueAffiliations.set(affId, uniqueAffiliations.size + 1);
        }
      });
    }
  });
}
---

{authors && authors.length > 0 && (
  <div style="margin-bottom: var(--wa-space-l);">
    <!-- Authors line -->
    <div style="margin-bottom: var(--wa-space-xs); line-height: var(--wa-line-height-normal); color: var(--wa-color-text-normal);">
      {authors.map((author: Contributor, index: number) => (
        <span>
          <span style="font-weight: var(--wa-font-weight-semibold); font-size: var(--wa-font-size-m); color: var(--wa-color-text-loud);">
            {getAuthorName(author)}
          </span>
          {author.affiliations && author.affiliations.length > 0 && (
            <sup style="font-size: var(--wa-font-size-xs); margin-left: 2px; color: var(--wa-color-text-normal);">
              {author.affiliations.map((affId: any, affIndex: number) => (
                <span>
                  {uniqueAffiliations.get(affId)}
                  {affIndex < author.affiliations.length - 1 && ','}
                </span>
              ))}
            </sup>
          )}
          {author.orcid && (
            <a
              href={`https://orcid.org/${author.orcid.replace(/(https?:\/\/)?orcid\.org\//, '')}`}
              target="_blank"
              rel="noopener noreferrer"
              title="ORCID"
              style="color: var(--wa-color-text-quiet); transition: color 0.2s; margin-left: var(--wa-space-2xs); text-decoration: none;"
              onmouseover="this.style.color='var(--wa-color-success-600)'"
              onmouseout="this.style.color='var(--wa-color-text-quiet)'"
            >
              <wa-icon library="scienceicons" name="orcid" style="font-size: 0.875rem; vertical-align: middle;" />
            </a>
          )}
          {author.email && (
            <a
              href={`mailto:${author.email}`}
              title="Email"
              style="color: var(--wa-color-text-quiet); transition: color 0.2s; margin-left: var(--wa-space-2xs); text-decoration: none;"
              onmouseover="this.style.color='var(--wa-color-primary-600)'"
              onmouseout="this.style.color='var(--wa-color-text-quiet)'"
            >
              <wa-icon library="scienceicons" name="email" style="font-size: 0.875rem; vertical-align: middle;" />
            </a>
          )}
          {index < authors.length - 1 && <span style="margin-right: var(--wa-space-xs);">,</span>}
        </span>
      ))}
    </div>

    <!-- Affiliations list -->
    {uniqueAffiliations.size > 0 && (
      <div style="font-size: var(--wa-font-size-s); color: var(--wa-color-text-quiet); line-height: var(--wa-line-height-normal);">
        {Array.from(uniqueAffiliations.entries()).map(([affId, index]) => (
          <div style="margin-bottom: var(--wa-space-2xs);">
            <sup style="font-size: var(--wa-font-size-xs); margin-right: var(--wa-space-2xs);">{index}</sup>
            <span>{getAffiliationName(affId, affiliations)}</span>
          </div>
        ))}
      </div>
    )}
  </div>
)}

<script>
  // Import Web Awesome components
  import '@awesome.me/webawesome/dist/components/icon/icon.js';
  import { registerScienceIconsLibrary } from '@awesome-myst/myst-awesome/lib/wa-scienceicons.ts';

  // Register scienceicons library
  // The library files are in /public/scienceicons/
  if (typeof window !== 'undefined') {
    // Register scienceicons library manually
    customElements.whenDefined('wa-icon').then(() => {
      const iconRegistry = (window as any).waIconLibraries || {};
      if (!iconRegistry.scienceicons) {
        registerScienceIconsLibrary();
      }
    });
  }
</script>
